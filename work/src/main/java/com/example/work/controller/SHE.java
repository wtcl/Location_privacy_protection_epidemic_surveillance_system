package com.example.work.controller;

import java.math.BigInteger;
import java.util.Random;

public class SHE{
	public int k0 = 1024;
	public int k1 = 40;
	public int k2 = 100;
	
	public BigInteger p = new BigInteger("103208146936017409001064853981771185455864998286468294292021651567093072755391006690797243062245227974110161616783290449963036069502455840116375500599809354378065508136232575810480600455008819848432899485314223940884758720245320373749115428478542050852778707911799037417936981398197252130697237545750626590533");
	public BigInteger q = new BigInteger("92500274593832986367397251378162856898838275239456223267003750596901351153941833991986120538983877035861510032124601559966888180086822596869763089693497173235432383986470751400008096226782421678729605536602796869447709469839623881733446440439628853239420308159705321567723006363118922973092807357378500861951");
	public BigInteger l = new BigInteger("1124127490067959807263446365663");
	
	public BigInteger N = new BigInteger("9546781931902272913828923724295801735314808738336117082299855267526370781255410204449406183189400394191553500504449780688226003981177767136688893176578431780322420126401247136429165105301768530585293216949048184660695178056521666063185594615709133221269883743509535638513583807607257049234822319285931079665127506948312293265462750992730487096731909922004955846964412738284005178524252365786602967132981374441626648735927147993313988069522138931741286006285375781327263105630906425730759283730995117116175980110578844530483675184106347643567976063814425010197997214633010035560584865048895967251500913096080836509883");

	public void SHEInitialization(int k0, int k1, int k2)
	{
		/*
		Random rnd = new Random();
		this.p = BigInteger.probablePrime(k0, rnd);
		this.q = BigInteger.probablePrime(k0, rnd);
		this.l = new BigInteger(k2, rnd);
		this.N = this.p.multiply(this.q); */

		this.k0 = k0;
		this.k1 = k1;
		this.k2 = k2;
	}
	
	public BigInteger SHEEncryption(BigInteger plaintext)
	{
		Random rnd = new Random();
		BigInteger r0 = new BigInteger(this.k2, rnd);
		BigInteger r1 = new BigInteger(this.k0, rnd);
		
		BigInteger tmp1 = ((r0.multiply(this.l).mod(this.N)).add(plaintext)).mod(this.N);
		BigInteger tmp2 = ((r1.multiply(this.p).mod(this.N)).add(BigInteger.ONE)).mod(this.N);
		return (tmp1.multiply(tmp2)).mod(this.N);
	}
	
	public BigInteger SHEDecryption(BigInteger ciphertext)
	{

		BigInteger plaintext = (ciphertext.mod(this.p)).mod(this.l);
		if(plaintext.compareTo(l.divide(new BigInteger("2"))) >= 0){
			plaintext = plaintext.subtract(l);
		}
		return plaintext;
	}

	public Integer SHECompare(BigInteger c1, BigInteger c2){
		return SHEDecryption(c1).subtract(SHEDecryption(c2)).compareTo(BigInteger.ZERO);
	}

	public static BigInteger SHEAdd(BigInteger ctxt1, BigInteger ctxt2){
		return ctxt1.add(ctxt2);
	}
	
	public static BigInteger SHEMul(BigInteger ctxt1, BigInteger ctxt2){
		return ctxt1.multiply(ctxt2);
	}
	public static BigInteger SHESubtract(BigInteger ctxt1, BigInteger ctxt2){
		return ctxt1.subtract(ctxt2);
	}

	
	public static void main(String[] args)
	{
		SHE she = new SHE();
		System.out.println("--------------------系统初始化--------------------");
		System.out.println("k0: "+she.k0);
		System.out.println("k1: "+she.k1);
		System.out.println("k2: "+she.k2);
		System.out.println("n: "+she.N);
		System.out.println("length: "+she.l);
		System.out.println("p: "+she.p);
		System.out.println("q: "+she.q);
		System.out.println("-------------------参数设置完成--------------------");

//		String[] data= new String[]{};
//		for(int i=0; i<4; i++){
//			System.out.println(she.SHEDecryption(new BigInteger(data[i])));
//		}

//		she.SHEInitialization(1024, 40, 100);
//		System.out.println(she.p.toString());
//		BigInteger ciphertext = BigInteger.ONE;
//		BigInteger plaintext = BigInteger.ONE;
//		BigInteger ciphertext1 = BigInteger.ONE;
//		ciphertext = she.SHEEncryption(new BigInteger("1"));
//		ciphertext1 = she.SHEEncryption(new BigInteger("1024"));
//		System.out.println(ciphertext);
//		System.out.println(ciphertext1);
//		plaintext = she.SHEDecryption(ciphertext);
//		System.out.println(plaintext);
//		StringBuilder stringBuilder = new StringBuilder();
//		for(int i = 0; i<1000000; i++){
//			ArrayList<List<String>> dis = new ArrayList<>();
//			List<String> d = new ArrayList<>();
//			Random random = new Random();
//			d.add(she.SHEEncryption(new BigInteger(String.valueOf(random.nextInt(100000000)))).toString());
//			d.add(she.SHEEncryption(new BigInteger(String.valueOf(random.nextInt(100000000)))).toString());
//			dis.add(d);
//			Map<String, ArrayList<List<String>>> rawMap = new HashMap<>();
//			rawMap.put("data", dis);
//			LinkedMultiValueMap<String, String> map = new LinkedMultiValueMap<>();
//			map.add("data",  JSONObject.toJSONString(rawMap));
//			WebClient client = WebClient.create();
//			@SuppressWarnings("rawtypes")
//			Flux<Map> mapFlux = client.post().uri("http://127.0.0.1:8080/api").contentType(MediaType.APPLICATION_FORM_URLENCODED).body(BodyInserters.fromFormData("data",JSONObject.toJSONString(rawMap))).retrieve().bodyToFlux(Map.class);
//			mapFlux.collectList().subscribe(maps -> {
//				String result = (String) maps.get(0).get("res");
//				stringBuilder.append(result+",");});
//		}
//		System.out.println(stringBuilder.toString());
	}

}
